initialize.c:  	zmin_cor=(realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->FluxSurf = (realtype **)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->FluxSub = (realtype **)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->FluxRiv = (realtype **)malloc(DS->NumRiv*sizeof(realtype));
initialize.c:  	DS->EleET = (realtype **)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->ElePrep = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleViR = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->Recharge = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->RechargeI = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleIS = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleISmax = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleISsnowmax = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleSnow = (realtype *)malloc(DS->NumEle*sizeof(realtype));  
initialize.c:  	DS->EleSnowGrnd = (realtype *)malloc(DS->NumEle*sizeof(realtype));  
initialize.c:  	DS->EleSnowCanopy = (realtype *)malloc(DS->NumEle*sizeof(realtype));  
initialize.c:  	DS->EleTF = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleETloss = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:  	DS->EleNetPrep = (realtype *)malloc(DS->NumEle*sizeof(realtype));
initialize.c:	DS->FluxSource = (realtype *)malloc(DS->NumEle*sizeof(realtype));               //xchen_20141006
initialize.c://        DS->Calc = (int *)malloc(DS->NumEle*sizeof(int));
initialize.c:	 for(i=0;i<DS->NumEle;i++)
initialize.c:    		DS->FluxSurf[i] = (realtype *)malloc(3*sizeof(realtype));
initialize.c:    		DS->FluxSub[i] = (realtype *)malloc(3*sizeof(realtype));
initialize.c:    		DS->EleET[i] = (realtype *)malloc(4*sizeof(realtype));
initialize.c://                DS->Calc[i] = (int *)malloc(3*sizeof(int));
initialize.c:    		a_x = DS->Node[DS->Ele[i].node[0]-1].x;
initialize.c:    		b_x = DS->Node[DS->Ele[i].node[1]-1].x;
initialize.c:    		c_x = DS->Node[DS->Ele[i].node[2]-1].x;
initialize.c:    		a_y = DS->Node[DS->Ele[i].node[0]-1].y;
initialize.c:    		b_y = DS->Node[DS->Ele[i].node[1]-1].y;
initialize.c:    		c_y = DS->Node[DS->Ele[i].node[2]-1].y;
initialize.c:    		a_zmin = DS->Node[DS->Ele[i].node[0]-1].zmin;
initialize.c:    		b_zmin = DS->Node[DS->Ele[i].node[1]-1].zmin;
initialize.c:    		c_zmin = DS->Node[DS->Ele[i].node[2]-1].zmin;
initialize.c:    		a_zmax = DS->Node[DS->Ele[i].node[0]-1].zmax;
initialize.c:    		b_zmax = DS->Node[DS->Ele[i].node[1]-1].zmax;
initialize.c:    		c_zmax = DS->Node[DS->Ele[i].node[2]-1].zmax;
initialize.c:    		DS->Ele[i].area = 0.5*fabs((b_x - a_x)*(c_y - a_y) - (b_y - a_y)*(c_x - a_x));
initialize.c:	//	printf("\n%lf,",DS->Ele[i].area);
initialize.c:         	DS->Ele[i].zmax = (a_zmax + b_zmax + c_zmax)/3.0;
initialize.c:    		DS->Ele[i].zmin = (a_zmin + b_zmin + c_zmin)/3.0; 
initialize.c:    		DS->Ele[i].edge[0] = pow((b_x - c_x), 2) + pow((b_y - c_y), 2);
initialize.c:    		DS->Ele[i].edge[1] = pow((c_x - a_x), 2) + pow((c_y - a_y), 2);
initialize.c:    		DS->Ele[i].edge[2] = pow((a_x - b_x), 2) + pow((a_y - b_y), 2);
initialize.c:    		DS->Ele[i].x = (a_x + b_x + c_x)/3.0;
initialize.c:    		DS->Ele[i].y = (a_y + b_y + c_y)/3.0;
initialize.c:  		/*  DS->Ele[i].x = a_x - ((b_y - a_y)*DS->Ele[i].edge[2] - (c_y - a_y)*DS->Ele[i].edge[0])/(4*DS->Ele[i].area);
initialize.c:    		DS->Ele[i].y = a_y + ((b_x - a_x)*DS->Ele[i].edge[2] - (c_x - a_x)*DS->Ele[i].edge[0])/(4*DS->Ele[i].area); 
initialize.c:    		DS->Ele[i].edge[0] = sqrt(DS->Ele[i].edge[0]);
initialize.c:    		DS->Ele[i].edge[1] = sqrt(DS->Ele[i].edge[1]);
initialize.c:    		DS->Ele[i].edge[2] = sqrt(DS->Ele[i].edge[2]);
initialize.c:    		DS->Ele[i].KsatV = CS->Cal.KsatV*DS->Geol[(DS->Ele[i].geol-1)].KsatV;
initialize.c:    		DS->Ele[i].infKsatV = CS->Cal.infKsatV*DS->Soil[(DS->Ele[i].soil-1)].KsatV;
initialize.c:		DS->Ele[i].macD=CS->Cal.macD*DS->Geol[DS->Ele[i].geol-1].macD;
initialize.c:		DS->Ele[i].Porosity = CS->Cal.Porosity*(DS->Soil[(DS->Ele[i].soil-1)].ThetaS - DS->Soil[(DS->Ele[i].soil-1)].ThetaR);
initialize.c://		DS->Ele[i].Porosity = CS->Cal.Porosity*(DS->Geol[(DS->Ele[i].geol-1)].ThetaS - DS->Geol[(DS->Ele[i].geol-1)].ThetaR);
initialize.c: 		if((DS->Ele[i].Porosity>1)&&(DS->Ele[i].Porosity<=0))
initialize.c:		DS->Ele[i].Alpha = CS->Cal.Alpha*DS->Soil[(DS->Ele[i].soil-1)].Alpha;
initialize.c:    		DS->Ele[i].Beta = CS->Cal.Beta*DS->Soil[(DS->Ele[i].soil-1)].Beta; 
initialize.c://		DS->Ele[i].Alpha = CS->Cal.Alpha*DS->Geol[(DS->Ele[i].geol-1)].Alpha;
initialize.c://    		DS->Ele[i].Beta = CS->Cal.Beta*DS->Geol[(DS->Ele[i].geol-1)].Beta; 
initialize.c:    		DS->Ele[i].hAreaF = CS->Cal.hAreaF*DS->Soil[(DS->Ele[i].soil-1)].hAreaF; 
initialize.c:    		DS->Ele[i].vAreaF = CS->Cal.vAreaF*DS->Geol[(DS->Ele[i].geol-1)].vAreaF; 
initialize.c:		DS->Ele[i].KsatH = CS->Cal.KsatH*DS->Geol[(DS->Ele[i].geol-1)].KsatH;
initialize.c://		DS->Ele[i].macKsatH = CS->Cal.KsatH*DS->Geol[(DS->Ele[i].geol-1)].KsatH;//Xing_03312013_remove the effect of macropore line 124 and 126
initialize.c:  		DS->Ele[i].macKsatV = CS->Cal.macKsatV*DS->Soil[(DS->Ele[i].soil-1)].macKsatV; 
initialize.c:  //  		DS->Ele[i].macKsatV = CS->Cal.KsatV*DS->Geol[(DS->Ele[i].geol-1)].KsatV;
initialize.c:    		DS->Ele[i].macKsatH = CS->Cal.macKsatH*DS->Geol[(DS->Ele[i].geol-1)].macKsatH;
initialize.c:		DS->Ele[i].macD=CS->Cal.macD*DS->Geol[DS->Ele[i].geol-1].macD; 
initialize.c:    		DS->Ele[i].infD=CS->Cal.infD*DS->Soil[DS->Ele[i].soil-1].infD;
initialize.c:    		DS->Ele[i].RzD=CS->Cal.RzD*DS->LandC[DS->Ele[i].LC-1].RzD;  
initialize.c:    		DS->Ele[i].LAImax = DS->LandC[DS->Ele[i].LC-1].LAImax;
initialize.c:    		DS->Ele[i].Rmin = DS->LandC[DS->Ele[i].LC-1].Rmin;
initialize.c:    		DS->Ele[i].Rs_ref = DS->LandC[DS->Ele[i].LC-1].Rs_ref;
initialize.c:    		DS->Ele[i].Albedo = CS->Cal.Albedo*DS->LandC[DS->Ele[i].LC-1].Albedo;
initialize.c:		if(DS->Ele[i].Albedo>1)
initialize.c:    		DS->Ele[i].VegFrac = CS->Cal.VegFrac*DS->LandC[DS->Ele[i].LC-1].VegFrac;                
initialize.c:    		DS->Ele[i].Rough = CS->Cal.Rough*DS->LandC[DS->Ele[i].LC-1].Rough;
initialize.c:		DS->Ele[i].windH=DS->windH[DS->Ele[i].WindVel-1];
initialize.c:  	for(i=0; i<DS->NumRiv; i++)
initialize.c:    		DS->FluxRiv[i] = (realtype *)malloc(11*sizeof(realtype));
initialize.c:			if(DS->Ele[DS->Riv[i].LeftEle-1].nabr[j]==DS->Riv[i].RightEle)
initialize.c:				DS->Ele[DS->Riv[i].LeftEle-1].BC[j]=-4*(i+1);
initialize.c:			if(DS->Ele[DS->Riv[i].RightEle-1].nabr[j]==DS->Riv[i].LeftEle)
initialize.c:				DS->Ele[DS->Riv[i].RightEle-1].BC[j]=-4*(i+1);
initialize.c:    		DS->Riv[i].x = (DS->Node[DS->Riv[i].FromNode-1].x + DS->Node[DS->Riv[i].ToNode-1].x)/2;
initialize.c:    		DS->Riv[i].y = (DS->Node[DS->Riv[i].FromNode-1].y + DS->Node[DS->Riv[i].ToNode-1].y)/2;
initialize.c:    		DS->Riv[i].zmax = (DS->Node[DS->Riv[i].FromNode-1].zmax + DS->Node[DS->Riv[i].ToNode-1].zmax)/2;
initialize.c:    		DS->Riv[i].depth = CS->Cal.rivDepth*DS->Riv_Shape[DS->Riv[i].shape-1].depth;
initialize.c:		DS->Riv[i].coeff=CS->Cal.rivShapeCoeff*DS->Riv_Shape[DS->Riv[i].shape - 1].coeff;
initialize.c:    		DS->Riv[i].zmin = DS->Riv[i].zmax - DS->Riv[i].depth;  
initialize.c:    		DS->Riv[i].Length = sqrt(pow(DS->Node[DS->Riv[i].FromNode-1].x -DS->Node[DS->Riv[i].ToNode-1].x, 2) + pow(DS->Node[DS->Riv[i].FromNode-1].y - DS->Node[DS->Riv[i].ToNode-1].y, 2));
initialize.c:		DS->Riv[i].KsatH=CS->Cal.rivKsatH*DS->Riv_Mat[DS->Riv[i].material-1].KsatH;
initialize.c:		DS->Riv[i].KsatV=CS->Cal.rivKsatV*DS->Riv_Mat[DS->Riv[i].material-1].KsatV;
initialize.c:		DS->Riv[i].bedThick=CS->Cal.rivbedThick*DS->Riv_Mat[DS->Riv[i].material-1].bedThick;
initialize.c:		DS->Riv[i].Rough=CS->Cal.rivRough*DS->Riv_Mat[DS->Riv[i].material - 1].Rough;
initialize.c:		DS->Ele[i+DS->NumEle].zmax=DS->Riv[i].zmin;
initialize.c:		DS->Ele[i+DS->NumEle].zmin=DS->Riv[i].zmax-(0.5*(DS->Ele[DS->Riv[i].LeftEle-1].zmax+DS->Ele[DS->Riv[i].RightEle-1].zmax)-0.5*(DS->Ele[DS->Riv[i].LeftEle-1].zmin+DS->Ele[DS->Riv[i].RightEle-1].zmin));
initialize.c://		DS->Ele[i+DS->NumEle].zmin=DS->Riv[i].zmax-40;
initialize.c:		DS->Ele[i+DS->NumEle].macD=0.5*(DS->Ele[DS->Riv[i].LeftEle-1].macD+DS->Ele[DS->Riv[i].RightEle-1].macD)>DS->Riv[i].depth?0.5*(DS->Ele[DS->Riv[i].LeftEle-1].macD+DS->Ele[DS->Riv[i].RightEle-1].macD)-DS->Riv[i].depth:0;	
initialize.c:		DS->Ele[i+DS->NumEle].macKsatH=0.5*(DS->Ele[DS->Riv[i].LeftEle-1].macKsatH+DS->Ele[DS->Riv[i].RightEle-1].macKsatH);
initialize.c:		DS->Ele[i+DS->NumEle].vAreaF=0.5*(DS->Ele[DS->Riv[i].LeftEle-1].vAreaF+DS->Ele[DS->Riv[i].RightEle-1].vAreaF);
initialize.c:		DS->Ele[i+DS->NumEle].KsatH=0.5*(DS->Ele[DS->Riv[i].LeftEle-1].KsatH+DS->Ele[DS->Riv[i].RightEle-1].KsatH);
initialize.c:		DS->Ele[i+DS->NumEle].Porosity=0.5*(DS->Ele[DS->Riv[i].LeftEle-1].Porosity+DS->Ele[DS->Riv[i].RightEle-1].Porosity);
initialize.c:    for(i=0;i<DS->NumRiv;i++)
initialize.c:        if(DS->Riv[i].down > 0)
initialize.c:           DS->Riv[i].Dist[0] = 0.5*(DS->Riv[i].Length+DS->Riv[DS->Riv[i].down - 1].Length);
initialize.c:           DS->Riv[i].Dist[0] = sqrt(pow(DS->Riv[i].x - DS->Node[DS->Riv[i].ToNode-1].x, 2) + pow(DS->Riv[i].y - DS->Node[DS->Riv[i].ToNode-1].y, 2));
initialize.c:        if(DS->Riv[i].LeftEle > 0)
initialize.c:           DS->Riv[i].Dist[1] = sqrt(pow((DS->Riv[i].x - DS->Ele[DS->Riv[i].LeftEle - 1].x), 2) + pow((DS->Riv[i].y - DS->Ele[DS->Riv[i].LeftEle - 1].y), 2));
initialize.c:       		   if(DS->Ele[DS->Riv[i].LeftEle - 1].nabr[j] == DS->Riv[i].RightEle)
initialize.c:                        DS->Riv[i].lrEdge[0]=j;
initialize.c:        if(DS->Riv[i].RightEle > 0)
initialize.c:           DS->Riv[i].Dist[2] = sqrt(pow((DS->Riv[i].x - DS->Ele[DS->Riv[i].RightEle - 1].x), 2) + pow((DS->Riv[i].y - DS->Ele[DS->Riv[i].RightEle - 1].y), 2));
initialize.c:               if(DS->Ele[DS->Riv[i].RightEle - 1].nabr[j] == DS->Riv[i].LeftEle)
initialize.c:                        DS->Riv[i].lrEdge[1]=j;
initialize.c:	for(i=0;i<DS->NumPrep;i++)
initialize.c:		for(j=0; j<DS->TSD_Prep[i].length; j++)
initialize.c:				DS->TSD_Prep[i].TS[j][1]=CS->Cal.Prep*DS->TSD_Prep[i].TS[j][1];
initialize.c:        for(i=0;i<DS->NumTemp;i++)
initialize.c:                for(j=0; j<DS->TSD_Temp[i].length; j++)
initialize.c:                        DS->TSD_Temp[i].TS[j][1]=CS->Cal.Temp*DS->TSD_Temp[i].TS[j][1];
initialize.c:	DS->PrintVar=(realtype **)malloc(sizeof(realtype **)*CS->totFiles);
initialize.c:                        DS->PrintVar[i]=(realtype *)calloc(DS->NumEle,sizeof(realtype));
initialize.c:                        DS->PrintVar[i]=(realtype *)calloc(DS->NumRiv,sizeof(realtype));
initialize.c:  	for(i=0; i<DS->NumEle; i++)
initialize.c:                a_x = DS->Node[DS->Ele[i].node[0]-1].x;
initialize.c:                b_x = DS->Node[DS->Ele[i].node[1]-1].x;
initialize.c:                c_x = DS->Node[DS->Ele[i].node[2]-1].x;
initialize.c:                a_y = DS->Node[DS->Ele[i].node[0]-1].y;
initialize.c:                b_y = DS->Node[DS->Ele[i].node[1]-1].y;
initialize.c:                c_y = DS->Node[DS->Ele[i].node[2]-1].y;
initialize.c:                			distX=(DS->Ele[i].x-0.5*(b_x+c_x));
initialize.c:                			distY=(DS->Ele[i].y-0.5*(b_y+c_y));
initialize.c:                			distX=(DS->Ele[i].x-0.5*(c_x+a_x));
initialize.c:                			distY=(DS->Ele[i].y-0.5*(c_y+a_y));
initialize.c:                			distX=(DS->Ele[i].x-0.5*(a_x+b_x));
initialize.c:                			distY=(DS->Ele[i].y-0.5*(a_y+b_y));
initialize.c:			DS->Ele[i].surfH[j]=(DS->Ele[i].nabr[j]>0)?(DS->Ele[i].BC[j]>-4?(DS->Ele[DS->Ele[i].nabr[j]-1].zmax):DS->Riv[-(DS->Ele[i].BC[j]/4)-1].zmax):DS->Ele[i].BC[j]<=-4?DS->Riv[-(DS->Ele[i].BC[j]/4)-1].zmax:(DS->Ele[i].zmax); 
initialize.c:			DS->Ele[i].surfX[j]=(DS->Ele[i].nabr[j]>0)?(DS->Ele[i].BC[j]>-4?DS->Ele[DS->Ele[i].nabr[j]-1].x:DS->Riv[-(DS->Ele[i].BC[j]/4)-1].x):(DS->Ele[i].x-2*distX);          
initialize.c:			DS->Ele[i].surfY[j]=DS->Ele[i].nabr[j]>0?(DS->Ele[i].BC[j]>-4?DS->Ele[DS->Ele[i].nabr[j]-1].y:DS->Riv[-(DS->Ele[i].BC[j]/4)-1].y):(DS->Ele[i].y-2*distY);
initialize.c:                        DS->Ele[i].Calc[j]=0;
initialize.c:            if(DS->Ele[i].nabr[j] > 0)
initialize.c:               DS->Ele[i].Dist[j] = sqrt(pow((DS->Ele[i].x - DS->Ele[DS->Ele[i].nabr[j] - 1].x), 2) + pow((DS->Ele[i].y - DS->Ele[DS->Ele[i].nabr[j] - 1].y), 2));
initialize.c:                       if(DS->Ele[i].index>DS->Ele[i].nabr[j])
initialize.c:                          if(DS->Ele[i].index==DS->Ele[DS->Ele[i].nabr[j]-1].nabr[k])
initialize.c:                          DS->Ele[i].Calc[j]=k+1;
initialize.c:               DS->Ele[i].Dist[j] = sqrt(pow(DS->Ele[i].edge[0]*DS->Ele[i].edge[1]*DS->Ele[i].edge[2]/(4*DS->Ele[i].area), 2) - pow(DS->Ele[i].edge[j]/2, 2));
initialize.c:		DS->Ele[i].dhBYdx=-(DS->Ele[i].surfY[2]*(DS->Ele[i].surfH[1]-DS->Ele[i].surfH[0])+DS->Ele[i].surfY[1]*(DS->Ele[i].surfH[0]-DS->Ele[i].surfH[2])+DS->Ele[i].surfY[0]*(DS->Ele[i].surfH[2]-DS->Ele[i].surfH[1]))/(DS->Ele[i].surfX[2]*(DS->Ele[i].surfY[1]-DS->Ele[i].surfY[0])+DS->Ele[i].surfX[1]*(DS->Ele[i].surfY[0]-DS->Ele[i].surfY[2])+DS->Ele[i].surfX[0]*(DS->Ele[i].surfY[2]-DS->Ele[i].surfY[1]));  
initialize.c:		DS->Ele[i].dhBYdy=-(DS->Ele[i].surfX[2]*(DS->Ele[i].surfH[1]-DS->Ele[i].surfH[0])+DS->Ele[i].surfX[1]*(DS->Ele[i].surfH[0]-DS->Ele[i].surfH[2])+DS->Ele[i].surfX[0]*(DS->Ele[i].surfH[2]-DS->Ele[i].surfH[1]))/(DS->Ele[i].surfY[2]*(DS->Ele[i].surfX[1]-DS->Ele[i].surfX[0])+DS->Ele[i].surfY[1]*(DS->Ele[i].surfX[0]-DS->Ele[i].surfX[2])+DS->Ele[i].surfY[0]*(DS->Ele[i].surfX[2]-DS->Ele[i].surfX[1]));
initialize.c:    		for(i=0; i<DS->NumEle; i++)
initialize.c:      			DS->EleIS[i] = 0;
initialize.c:			DS->EleSnow[i]=0;
initialize.c:			DS->EleSnowGrnd[i]=(1-DS->Ele[i].VegFrac)* DS->EleSnow[i];
initialize.c:			DS->EleSnowCanopy[i]=DS->Ele[i].VegFrac* DS->EleSnow[i];
initialize.c:      			NV_Ith_S(CV_Y, i + DS->NumEle) = 0;
initialize.c:      			NV_Ith_S(CV_Y, i + 2*DS->NumEle) = DS->Ele[i].zmax - DS->Ele[i].zmin -0.1;
initialize.c:    		for(i=0; i<DS->NumRiv; i++)
initialize.c:      			NV_Ith_S(CV_Y, i + 4*DS->NumEle) = 0;
initialize.c:			NV_Ith_S(CV_Y, i + 4*DS->NumEle+DS->NumRiv)=(DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin) -0.1;
initialize.c:    			for(i=0; i<DS->NumEle; i++)
initialize.c:      				DS->EleIS[i] = DS->Ele_IC[i].interception;
initialize.c:				DS->EleSnow[i]=DS->Ele_IC[i].snow;
initialize.c:				DS->EleSnowGrnd[i]=(1-DS->Ele[i].VegFrac)* DS->EleSnow[i];
initialize.c:				DS->EleSnowCanopy[i]=DS->Ele[i].VegFrac* DS->EleSnow[i];
initialize.c:      				NV_Ith_S(CV_Y, i) = DS->Ele_IC[i].surf;
initialize.c:      				NV_Ith_S(CV_Y, i + DS->NumEle) = DS->Ele_IC[i].unsat+0.1;
initialize.c:				NV_Ith_S(CV_Y, i + 2*DS->NumEle) = DS->Ele_IC[i].sat; 
initialize.c:                                NV_Ith_S(CV_Y, i + 3*DS->NumEle)=(DS->Ele[i].zmax-DS->Ele[i].zmin-DS->Ele[i].infD-NV_Ith_S(CV_Y, i + 2*DS->NumEle))>0?0.75*(DS->Ele[i].zmax-DS->Ele[i].zmin-DS->Ele[i].infD-NV_Ith_S(CV_Y, i + 2*DS->NumEle)):0.1; 
initialize.c:				if(DS->Ele[i].procNo-1 == my_pe)					//xchen_20150329_start
initialize.c:      					DS->EleIS[locI] = DS->Ele_IC[i].interception;
initialize.c:                                	DS->EleSnow[locI]=DS->Ele_IC[i].snow;
initialize.c:                                	DS->EleSnowGrnd[locI]=(1-DS->Ele[i].VegFrac)* DS->EleSnow[i];
initialize.c:                                	DS->EleSnowCanopy[locI]=DS->Ele[i].VegFrac* DS->EleSnow[i];
initialize.c:					y_data[locI] = DS->Ele_IC[i].surf;
initialize.c:					y_data[locI+NumEleInProc[my_pe]] = DS->Ele_IC[i].unsat+0.1;
initialize.c:      					y_data[locI+2*NumEleInProc[my_pe]] = DS->Ele_IC[i].sat
initialize.c:      					y_data[locI+3*NumEleInProc[my_pe]] = (DS->Ele[i].zmax-DS->Ele[i].zmin-y_data[locI+NumEleInProc[my_pe]]-y_data[locI+2*NumEleInProc[my_pe]])>0?0.75*(DS->Ele[i].zmax-DS->Ele[i].zmin-y_data[locI+NumEleInProc[my_pe]]-y_data[locI+2*NumEleInProc[my_pe]]):0.1;
initialize.c:                        for(i=0; i<DS->NumRiv; i++)
initialize.c:				NV_Ith_S(CV_Y, i + DS->totele) = DS->Riv_IC[DS->Riv[i].IC-1].value;
initialize.c:                                NV_Ith_S(CV_Y, i + DS->totele+DS->NumRiv) =(DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin)-0.1;
initialize.c:				if(DS->Riv[i].proc-1==my_pe)
initialize.c:					y_data[locI+3*NumEleInProc[my_pe]] = DS->Riv_IC[DS->Riv[i].IC-1].value;
initialize.c:                                	y_data[locI+3*NumEleInProc[my_pe]+NumRivInProc[my_pe]] = (DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin)-0.1;
initialize.c:                                        y_data[locI+4*NumEleInProc[my_pe]] = DS->Riv_IC[DS->Riv[i].IC-1].value;
initialize.c:					y_data[locI+4*NumEleInProc[my_pe]+NumRivInProc[my_pe]] = (DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin)-0.1;
initialize.c:      			for(i=0; i<DS->NumEle; i++)
initialize.c:        			fscanf(init_file, "%lf %lf %lf %lf %lf %lf", &DS->EleIS[i],&DS->EleSnow[i],&tempvalue1,&tempvalue2,&tempvalue3,&tempvalue4);
initialize.c:                                DS->EleSnowGrnd[i]=0*(1-DS->Ele[i].VegFrac)* DS->EleSnow[i];
initialize.c:                                DS->EleSnowCanopy[i]=0*DS->Ele[i].VegFrac* DS->EleSnow[i];
initialize.c:				NV_Ith_S(CV_Y, i + DS->NumEle)=tempvalue2;
initialize.c:				NV_Ith_S(CV_Y, i + 2*DS->NumEle)=tempvalue3;
initialize.c://				NV_Ith_S(CV_Y, i + 3*DS->NumEle)=(DS->Ele[i].zmax-DS->Ele[i].zmin-DS->Ele[i].infD-NV_Ith_S(CV_Y, i + 2*DS->NumEle))>0?0.5*(DS->Ele[i].zmax-DS->Ele[i].zmin-DS->Ele[i].infD-NV_Ith_S(CV_Y, i + 2*DS->NumEle)):0.1;
initialize.c:				NV_Ith_S(CV_Y, i + 3*DS->NumEle)=tempvalue4;
initialize.c:      			for(i=0; i<DS->NumRiv; i++)
initialize.c:        			NV_Ith_S(CV_Y, i + DS->totele) = tempvalue1;
initialize.c:				NV_Ith_S(CV_Y, i + DS->totele+DS->NumRiv) = (DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin);
initialize.c://				NV_Ith_S(CV_Y, i + DS->totele+DS->NumRiv) = tempvalue2; //(DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin);
print.c:	tmpNumObj=(fileCounter+tmpCounter)<12?tmpDS->NumEle:tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->EleNetPrep[j];
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->EleIS[j];
print.c:				varToPrint[j]=varToPrint[j]+NV_Ith_S(tmpNV,j+(fileCounter-2)*tmpDS->NumEle);
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->EleET[j][0];
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->EleET[j][1];
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->EleET[j][2];
print.c:                                varToPrint[j]=varToPrint[j]+tmpDS->ElePrep[j];
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->Recharge[j];
print.c:*/				varToPrint[j]=varToPrint[j]+NV_Ith_S(tmpNV,j+3*tmpDS->NumEle);
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->RechargeI[j];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+NV_Ith_S(tmpNV,j+tmpDS->totele);
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+NV_Ith_S(tmpNV,j+tmpDS->totele+tmpDS->NumRiv);
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:		               tmpDS->FluxRiv[j][0]=0;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:			tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:		       tmpNumObj=tmpDS->NumRiv;
print.c:                       tmpDS->FluxRiv[j][10]=0;
print.c:                 	tmpNumObj=tmpDS->NumRiv;
print.c:				varToPrint[j]=varToPrint[j]+tmpDS->FluxRiv[j][fileCounter+tmpCounter-14];
print.c:*/		avgResults_NV(cD->FileNoToPrint[k],outp,DS->PrintVar[cD->FileNoToPrint[k]],CV_Y,DS,cD->fileInt[cD->FileNoToPrint[k]],t,m,cD->b);
read_alloc.c:        fscanf(mesh_file,"%d %d %d", &DS->NumEle, &DS->NumNode,&DS->NumProc);
read_alloc.c:        NumEleInProc=(int *)malloc(DS->NumProc*sizeof(int));
read_alloc.c:        EleInProc=(int **)malloc(DS->NumProc*sizeof(int *));
read_alloc.c:        EleInProcCounter=(int *)malloc(DS->NumProc*sizeof(int));
read_alloc.c:        for(i=0;i<DS->NumProc;i++)
read_alloc.c:        DS->Ele = (element *)malloc((DS->NumEle+DS->NumRiv)*sizeof(element));
read_alloc.c:        DS->Node = (nodes *)malloc(DS->NumNode*sizeof(nodes));
read_alloc.c:        for (i=0; i<DS->NumEle; i++)
read_alloc.c:                fscanf(mesh_file, "%d", &(DS->Ele[i].index));
read_alloc.c:                fscanf(mesh_file, "%d %d %d", &(DS->Ele[i].node[0]), &(DS->Ele[i].node[1]), &(DS->Ele[i].node[2]));
read_alloc.c:                fscanf(mesh_file, "%d %d %d", &(DS->Ele[i].nabr[0]), &(DS->Ele[i].nabr[1]), &(DS->Ele[i].nabr[2]));
read_alloc.c:                fscanf(mesh_file, "%d", &(DS->Ele[i].procNo));                          //xchen_20150328_start
read_alloc.c:                EleInProc[DS->Ele[i].procNo-1][EleInProcCounter[DS->Ele[i].procNo-1]]=DS->Ele[i].index;
read_alloc.c:                EleInProcCounter[DS->Ele[i].procNo-1]++;                                //xchen_20150328_end
read_alloc.c:        EleNabrSequence=(int ***)malloc((DS->NumProc)*sizeof(int **));
read_alloc.c:        EleSeqCounter=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:        for(i=0;i<DS->NumProc;i++)
read_alloc.c:                EleNabrSequence[i]=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:                EleSeqCounter[i]=(int *)malloc((DS->NumProc)*sizeof(int));
read_alloc.c:                for(j=0;j<DS->NumProc;j++)
read_alloc.c:	for (i=0; i<DS->NumEle; i++)
read_alloc.c:                        if(DS->Ele[i].nabr[j]>0)
read_alloc.c:                                if(DS->Ele[i].procNo!=DS->Ele[DS->Ele[i].nabr[j]-1].procNo)
read_alloc.c:                                        EleNabrSequence[DS->Ele[i].procNo-1][DS->Ele[DS->Ele[i].nabr[j]-1].procNo-1][EleSeqCounter[DS->Ele[i].procNo-1][DS->Ele[DS->Ele[i].nabr[j]-1].procNo-1]]=DS->Ele[i].index-1;
read_alloc.c:                                        EleSeqCounter[DS->Ele[i].procNo-1][DS->Ele[DS->Ele[i].nabr[j]-1].procNo-1]++;
read_alloc.c:  /*                             printf("Ele %d %d %d %d",i,DS->Ele[i].procNo-1,DS->Ele[DS->Ele[i].nabr[j]-1].procNo-1,DS->Ele[i].index-1);
read_alloc.c:        for (i=0; i<DS->NumNode; i++)
read_alloc.c:                fscanf(mesh_file, "%d", &(DS->Node[i].index));
read_alloc.c:                fscanf(mesh_file, "%lf %lf", &(DS->Node[i].x), &(DS->Node[i].y));
read_alloc.c:                fscanf(mesh_file, "%lf %lf", &(DS->Node[i].zmin),&(DS->Node[i].zmax));
read_alloc.c:  	fscanf(riv_file, "%d", &DS->NumRiv);
read_alloc.c:  	NumRivInProc=(int *)malloc(DS->NumProc*sizeof(int));
read_alloc.c:  	RivInProc=(int **)malloc(DS->NumProc*sizeof(int *));
read_alloc.c:  	RivInProcCounter=(int *)malloc(DS->NumProc*sizeof(int));
read_alloc.c:  	for(i=0;i<DS->NumProc;i++)
read_alloc.c:  	DS->Riv = (river_segment *)malloc(DS->NumRiv*sizeof(river_segment));
read_alloc.c:  	DS->Riv_IC = (river_IC *)malloc(DS->NumRiv*sizeof(river_IC));
read_alloc.c:	for (i=0; i<DS->NumRiv; i++)							//xchen_20150328_start
read_alloc.c:    		DS->Riv[i].NumURiv=0;       /* Number of upstream river segments */
read_alloc.c:        		DS->Riv[i].up[j]=-4;    /* dummy -ve value */
read_alloc.c:  	for (i=0; i<DS->NumRiv; i++)
read_alloc.c:    		fscanf(riv_file, "%d", &(DS->Riv[i].index));
read_alloc.c:    		fscanf(riv_file, "%d %d", &(DS->Riv[i].FromNode), &(DS->Riv[i].ToNode));
read_alloc.c:    		fscanf(riv_file, "%d", &(DS->Riv[i].down));
read_alloc.c:		fscanf(riv_file, "%d", &(DS->Riv[i].NumDRiv));      /* To consider for distributaries */	//xchen_20150328_start
read_alloc.c:    		for(j=0;j<DS->Riv[i].NumDRiv;j++)
read_alloc.c:			if(DS->Riv[i].down[j]>0)						
read_alloc.c:                		DS->Riv[DS->Riv[i].down[j]-1].up[DS->Riv[DS->Riv[i].down[j]-1].NumURiv]=DS->Riv[i].index;
read_alloc.c:                		DS->Riv[DS->Riv[i].down[j]-1].NumURiv++;
read_alloc.c:    		fscanf(riv_file, "%d %d", &(DS->Riv[i].LeftEle), &(DS->Riv[i].RightEle));
read_alloc.c:    		fscanf(riv_file, "%d %d", &(DS->Riv[i].shape), &(DS->Riv[i].material));
read_alloc.c:    		fscanf(riv_file, "%d %d", &(DS->Riv[i].IC), &(DS->Riv[i].BC));  
read_alloc.c:    		fscanf(riv_file, "%d", &(DS->Riv[i].reservoir));                        
read_alloc.c:  		fscanf(riv_file, "%d", &(DS->Riv[i].proc));				//xchen_20150328_start
read_alloc.c:    		RivInProc[DS->Riv[i].proc-1][RivInProcCounter[DS->Riv[i].proc-1]]=DS->Riv[i].index;
read_alloc.c:    		RivInProcCounter[DS->Riv[i].proc-1]++;					//xchen_20150328_end
read_alloc.c:  	RivNabrSequence=(int ***)malloc((DS->NumProc)*sizeof(int **));
read_alloc.c:  	RivSeqCounter=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:  	RivEleNabrSequence=(int ***)malloc((DS->NumProc)*sizeof(int **));
read_alloc.c:  	RivEleSeqCounter=(int **)malloc((DS->NumProc)*sizeof(int *));  
read_alloc.c:  	EleRivNabrSequence=(int ***)malloc((DS->NumProc)*sizeof(int **));
read_alloc.c:        EleRivSeqCounter=(int **)malloc((DS->NumProc)*sizeof(int *)); 	
read_alloc.c:	for(i=0;i<DS->NumProc;i++)
read_alloc.c:        	RivNabrSequence[i]=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:        	RivSeqCounter[i]=(int *)malloc((DS->NumProc)*sizeof(int));
read_alloc.c:        	RivEleNabrSequence[i]=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:        	RivEleSeqCounter[i]=(int *)malloc((DS->NumProc)*sizeof(int));
read_alloc.c:        	EleRivNabrSequence[i]=(int **)malloc((DS->NumProc)*sizeof(int *));
read_alloc.c:                EleRivSeqCounter[i]=(int *)malloc((DS->NumProc)*sizeof(int));
read_alloc.c:		for(j=0;j<DS->NumProc;j++)
read_alloc.c:  	for (i=0; i<DS->NumRiv; i++)
read_alloc.c:        	for(j=0;j<DS->Riv[i].NumDRiv;j++)
read_alloc.c:                	if(DS->Riv[i].down[j]>0)
read_alloc.c:                                if(DS->Riv[i].proc!=DS->Riv[DS->Riv[i].down[j]-1].proc)
read_alloc.c:                                        RivNabrSequence[DS->Riv[i].proc-1][DS->Riv[DS->Riv[i].down[j]-1].proc-1][RivSeqCounter[DS->Riv[i].proc-1][DS->Riv[DS->Riv[i].down[j]-1].proc-1]]=DS->Riv[i].index-1;
read_alloc.c:                                        RivSeqCounter[DS->Riv[i].proc-1][DS->Riv[DS->Riv[i].down[j]-1].proc-1]++;
read_alloc.c:                                        RivNabrSequence[DS->Riv[DS->Riv[i].down[j]-1].proc-1][DS->Riv[i].proc-1][RivSeqCounter[DS->Riv[DS->Riv[i].down[j]-1].proc-1][DS->Riv[i].proc-1]]=DS->Riv[DS->Riv[i].down[j]-1].index-1;
read_alloc.c:                                        RivSeqCounter[DS->Riv[DS->Riv[i].down[j]-1].proc-1][DS->Riv[i].proc-1]++;		//why need to assign RivNabrSequence twice?				xchen_20150403
read_alloc.c:		if(DS->Riv[i].proc-1!=DS->Ele[DS->Riv[i].LeftEle-1].procNo-1)
read_alloc.c:                	RivEleNabrSequence[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].LeftEle-1].procNo-1][RivEleSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].LeftEle-1].procNo-1]]=DS->Riv[i].LeftEle-1;					//xchen_20150404 return element id rather than river id	
read_alloc.c:                	RivEleSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].LeftEle-1].procNo-1]++;
read_alloc.c:			EleRivNabrSequence[DS->Ele[DS->Riv[i].LeftEle-1].procNo-1][DS->Riv[i].proc-1][EleRivSeqCounter[DS->Ele[DS->Riv[i].LeftEle-1].procNo-1][DS->Riv[i].proc-1]]=DS->Riv[i].index-1;                                        			//xchen_20150404 
read_alloc.c:                        EleRivSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].LeftEle-1].procNo-1]++;		//xchen_20150404
read_alloc.c:                	RivInProc[DS->Ele[DS->Riv[i].LeftEle-1].procNo-1][RivInProcCounter[DS->Ele[DS->Riv[i].LeftEle-1].procNo-1]]=DS->Riv[i].index;
read_alloc.c:                	RivInProcCounter[DS->Ele[DS->Riv[i].LeftEle-1].procNo-1]++;
read_alloc.c:        	else if(DS->Riv[i].proc-1!=DS->Ele[DS->Riv[i].RightEle-1].procNo-1)
read_alloc.c:                	RivEleNabrSequence[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].RightEle-1].procNo-1][RivEleSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].RightEle-1].procNo-1]]=DS->Riv[i].RightEle-1;					//xchen_20150404 return element id rather than river id?
read_alloc.c:                	RivEleSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].RightEle-1].procNo-1]++;
read_alloc.c:                	EleRivNabrSequence[DS->Ele[DS->Riv[i].RightEle-1].procNo-1][DS->Riv[i].proc-1][EleRivSeqCounter[DS->Ele[DS->Riv[i].RightEle-1].procNo-1][DS->Riv[i].proc-1]]=DS->Riv[i].index-1;                                                          //xchen_20150404 
read_alloc.c:                        EleRivSeqCounter[DS->Riv[i].proc-1][DS->Ele[DS->Riv[i].RightEle-1].procNo-1]++;          //xchen_20150404
read_alloc.c:			RivInProc[DS->Ele[DS->Riv[i].RightEle-1].procNo-1][RivInProcCounter[DS->Ele[DS->Riv[i].RightEle-1].procNo-1]]=DS->Riv[i].index;
read_alloc.c:                	RivInProcCounter[DS->Ele[DS->Riv[i].RightEle-1].procNo-1]++;
read_alloc.c:	fscanf(riv_file, "%s %d", tempchar, &DS->NumRivShape);
read_alloc.c:  	DS->Riv_Shape = (river_shape *)malloc(DS->NumRivShape*sizeof(river_shape));
read_alloc.c:  	for (i=0; i<DS->NumRivShape; i++)
read_alloc.c:    		fscanf(riv_file, "%d", &DS->Riv_Shape[i].index);
read_alloc.c:    		fscanf(riv_file, "%lf", &DS->Riv_Shape[i].depth);
read_alloc.c:    		fscanf(riv_file, "%d %lf",&DS->Riv_Shape[i].interpOrd,&DS->Riv_Shape[i].coeff);
read_alloc.c:  	fscanf(riv_file, "%s %d", tempchar, &DS->NumRivMaterial);
read_alloc.c:  	DS->Riv_Mat = (river_material *)malloc(DS->NumRivMaterial*sizeof(river_material));
read_alloc.c:  	for (i=0; i<DS->NumRivMaterial; i++)
read_alloc.c:    		fscanf(riv_file, "%d %lf %lf %lf %lf %lf", &DS->Riv_Mat[i].index, &DS->Riv_Mat[i].Rough, &DS->Riv_Mat[i].Cwr, &DS->Riv_Mat[i].KsatH,&DS->Riv_Mat[i].KsatV,&DS->Riv_Mat[i].bedThick);
read_alloc.c:  	fscanf(riv_file, "%s %d", tempchar, &DS->NumRivIC);
read_alloc.c:  	DS->Riv_IC = (river_IC *)malloc(DS->NumRivIC*sizeof(river_IC));
read_alloc.c:  	for (i=0; i<DS->NumRivIC; i++)
read_alloc.c:    		fscanf(riv_file, "%d %lf", &DS->Riv_IC[i].index, &DS->Riv_IC[i].value);
read_alloc.c:  	fscanf(riv_file, "%s %d", tempchar, &DS->NumRivBC);
read_alloc.c:  	DS->TSD_Riv = (TSD *)malloc(DS->NumRivBC*sizeof(TSD));
read_alloc.c:  	for(i=0; i<DS->NumRivBC; i++)
read_alloc.c:    		fscanf(riv_file, "%s %d %d", DS->TSD_Riv[i].name, &DS->TSD_Riv[i].index, &DS->TSD_Riv[i].length);
read_alloc.c:    		DS->TSD_Riv[i].TS = (realtype **)malloc((DS->TSD_Riv[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Riv[i].length; j++)
read_alloc.c:      			DS->TSD_Riv[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Riv[i].length; j++)
read_alloc.c:      			fscanf(riv_file, "%lf %lf", &DS->TSD_Riv[i].TS[j][0], &DS->TSD_Riv[i].TS[j][1]);
read_alloc.c:  	fscanf(riv_file, "%s %d", tempchar, &DS->NumRes);
read_alloc.c:  	if(DS->NumRes > 0)
read_alloc.c:  	DS->Ele_IC = (element_IC *)malloc(DS->NumEle*sizeof(element_IC));
read_alloc.c:  	for (i=0; i<DS->NumEle; i++)
read_alloc.c:    		fscanf(att_file, "%d %d %d", &(DS->Ele[i].soil), &(DS->Ele[i].geol), &(DS->Ele[i].LC));
read_alloc.c://		DS->Ele[i].LC=1;
read_alloc.c:    		fscanf(att_file, "%lf %lf %lf %lf %lf",&(DS->Ele_IC[i].interception),&(DS->Ele_IC[i].snow),&(DS->Ele_IC[i].surf),&(DS->Ele_IC[i].unsat),&(DS->Ele_IC[i].sat));
read_alloc.c:    		fscanf(att_file, "%d %d", &(DS->Ele[i].prep), &(DS->Ele[i].temp));
read_alloc.c:    		fscanf(att_file, "%d %d", &(DS->Ele[i].humidity), &(DS->Ele[i].WindVel));
read_alloc.c:    		fscanf(att_file, "%d %d", &(DS->Ele[i].Rn), &(DS->Ele[i].G));
read_alloc.c:    		fscanf(att_file, "%d %d %d", &(DS->Ele[i].pressure), &(DS->Ele[i].source), &(DS->Ele[i].meltF));
read_alloc.c:    			fscanf(att_file, "%d", &(DS->Ele[i].BC[j]));
read_alloc.c:		fscanf(att_file, "%d", &(DS->Ele[i].Macropore));
read_alloc.c:  	fscanf(soil_file, "%d", &DS->NumSoil);
read_alloc.c:  	DS->Soil = (soils *)malloc(DS->NumSoil*sizeof(soils));
read_alloc.c:  	for (i=0; i<DS->NumSoil; i++)
read_alloc.c:    		fscanf(soil_file, "%d", &(DS->Soil[i].index));
read_alloc.c:    		fscanf(soil_file, "%lf",&(DS->Soil[i].KsatV));
read_alloc.c:    		fscanf(soil_file, "%lf %lf %lf", &(DS->Soil[i].ThetaS), &(DS->Soil[i].ThetaR), &(DS->Soil[i].infD));
read_alloc.c:    		fscanf(soil_file, "%lf %lf", &(DS->Soil[i].Alpha), &(DS->Soil[i].Beta));
read_alloc.c:    		fscanf(soil_file, "%lf %lf", &(DS->Soil[i].hAreaF),&(DS->Soil[i].macKsatV));
read_alloc.c:        fscanf(geol_file, "%d", &DS->NumGeol);
read_alloc.c:        DS->Geol = (geol *)malloc(DS->NumGeol*sizeof(geol));
read_alloc.c:        for (i=0; i<DS->NumGeol; i++)
read_alloc.c:                fscanf(geol_file, "%d", &(DS->Geol[i].index));
read_alloc.c:                fscanf(geol_file, "%lf %lf", &(DS->Geol[i].KsatH),&(DS->Geol[i].KsatV));
read_alloc.c:                fscanf(geol_file, "%lf %lf", &(DS->Geol[i].ThetaS), &(DS->Geol[i].ThetaR));
read_alloc.c:                fscanf(soil_file, "%lf %lf", &(DS->Geol[i].Alpha), &(DS->Geol[i].Beta));
read_alloc.c:                fscanf(soil_file, "%lf %lf %lf", &(DS->Geol[i].vAreaF),&(DS->Geol[i].macKsatH),&(DS->Geol[i].macD));
read_alloc.c:  	fscanf(lc_file, "%d", &DS->NumLC);
read_alloc.c:  	DS->LandC = (LC *)malloc(DS->NumLC*sizeof(LC));
read_alloc.c:  	for (i=0; i<DS->NumLC; i++)
read_alloc.c:    		fscanf(lc_file, "%d", &(DS->LandC[i].index));
read_alloc.c:    		fscanf(lc_file, "%lf", &(DS->LandC[i].LAImax));
read_alloc.c:    		fscanf(lc_file, "%lf %lf", &(DS->LandC[i].Rmin), &(DS->LandC[i].Rs_ref));
read_alloc.c:    		fscanf(lc_file, "%lf %lf", &(DS->LandC[i].Albedo), &(DS->LandC[i].VegFrac));
read_alloc.c:    		fscanf(lc_file, "%lf %lf", &(DS->LandC[i].Rough),&(DS->LandC[i].RzD));
read_alloc.c:  	fscanf(forc_file, "%d %d", &DS->NumPrep, &DS->NumTemp);
read_alloc.c:  	fscanf(forc_file, "%d %d", &DS->NumHumidity, &DS->NumWindVel);
read_alloc.c:  	fscanf(forc_file, "%d %d", &DS->NumRn, &DS->NumG);
read_alloc.c:  	fscanf(forc_file, "%d %d", &DS->NumP, &DS->NumLC);
read_alloc.c:  	fscanf(forc_file, "%d", &DS->NumMeltF);
read_alloc.c:  	fscanf(forc_file, "%d", &DS->NumSource);
read_alloc.c:  	DS->TSD_Prep = (TSD *)malloc(DS->NumPrep*sizeof(TSD));
read_alloc.c:  	DS->TSD_Temp = (TSD *)malloc(DS->NumTemp*sizeof(TSD));
read_alloc.c:  	DS->TSD_Humidity = (TSD *)malloc(DS->NumHumidity*sizeof(TSD));
read_alloc.c:  	DS->TSD_WindVel = (TSD *)malloc(DS->NumWindVel*sizeof(TSD));
read_alloc.c:  	DS->TSD_Rn = (TSD *)malloc(DS->NumRn*sizeof(TSD));
read_alloc.c:  	DS->TSD_G = (TSD *)malloc(DS->NumG*sizeof(TSD));
read_alloc.c:  	DS->TSD_Pressure = (TSD *)malloc(DS->NumP*sizeof(TSD));
read_alloc.c:  	DS->TSD_LAI = (TSD *)malloc(DS->NumLC*sizeof(TSD));
read_alloc.c:  	DS->TSD_RL = (TSD *)malloc(DS->NumLC*sizeof(TSD));  
read_alloc.c:  	DS->TSD_MeltF = (TSD *)malloc(DS->NumMeltF*sizeof(TSD));
read_alloc.c:  	DS->TSD_Source = (TSD *)malloc(DS->NumSource*sizeof(TSD));
read_alloc.c:  	DS->ISFactor = (realtype *)malloc(DS->NumLC*sizeof(realtype));
read_alloc.c:  	DS->windH = (realtype *)malloc(DS->NumWindVel*sizeof(realtype));
read_alloc.c:  	for(i=0; i<DS->NumPrep; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Prep[i].name, &DS->TSD_Prep[i].index, &DS->TSD_Prep[i].length);
read_alloc.c:    		DS->TSD_Prep[i].TS = (realtype **)malloc((DS->TSD_Prep[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Prep[i].length; j++)
read_alloc.c:      			DS->TSD_Prep[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Prep[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Prep[i].TS[j][0], &DS->TSD_Prep[i].TS[j][1]);
read_alloc.c:		//	DS->TSD_Prep[i].TS[j][1]=0.3*DS->TSD_Prep[i].TS[j][1];
read_alloc.c://                     if(DS->TSD_Prep[i].TS[j][1]>0)
read_alloc.c://				printf("%lf",DS->TSD_Prep[i].TS[j][1]);
read_alloc.c:		DS->TSD_Prep[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumTemp; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Temp[i].name, &DS->TSD_Temp[i].index, &DS->TSD_Temp[i].length);
read_alloc.c:    		DS->TSD_Temp[i].TS = (realtype **)malloc((DS->TSD_Temp[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Temp[i].length; j++)
read_alloc.c:      			DS->TSD_Temp[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Temp[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Temp[i].TS[j][0], &DS->TSD_Temp[i].TS[j][1]);
read_alloc.c:		DS->TSD_Temp[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumHumidity; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Humidity[i].name, &DS->TSD_Humidity[i].index, &DS->TSD_Humidity[i].length);
read_alloc.c:    		DS->TSD_Humidity[i].TS = (realtype **)malloc((DS->TSD_Humidity[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Humidity[i].length; j++)
read_alloc.c:      			DS->TSD_Humidity[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Humidity[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Humidity[i].TS[j][0], &DS->TSD_Humidity[i].TS[j][1]);
read_alloc.c:		DS->TSD_Humidity[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumWindVel; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d %lf", DS->TSD_WindVel[i].name, &DS->TSD_WindVel[i].index, &DS->TSD_WindVel[i].length, &DS->windH[i]);
read_alloc.c://    		fscanf(forc_file, "%s %d %d ", DS->TSD_WindVel[i].name, &DS->TSD_WindVel[i].index, &DS->TSD_WindVel[i].length);
read_alloc.c://		DS->windH[i]=3.0;
read_alloc.c:    		DS->TSD_WindVel[i].TS = (realtype **)malloc((DS->TSD_WindVel[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_WindVel[i].length; j++)
read_alloc.c:      			DS->TSD_WindVel[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_WindVel[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_WindVel[i].TS[j][0], &DS->TSD_WindVel[i].TS[j][1]);
read_alloc.c:		//	DS->TSD_WindVel[i].TS[j][1]=86400.0*DS->TSD_WindVel[i].TS[j][1];
read_alloc.c:		DS->TSD_WindVel[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumRn; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Rn[i].name, &DS->TSD_Rn[i].index, &DS->TSD_Rn[i].length);
read_alloc.c:    		DS->TSD_Rn[i].TS = (realtype **)malloc((DS->TSD_Rn[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Rn[i].length; j++)
read_alloc.c:      			DS->TSD_Rn[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Rn[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Rn[i].TS[j][0], &DS->TSD_Rn[i].TS[j][1]);
read_alloc.c:	//		DS->TSD_Rn[i].TS[j][1]=86400.0*DS->TSD_Rn[i].TS[j][1];
read_alloc.c:		DS->TSD_Rn[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumG; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_G[i].name, &DS->TSD_G[i].index, &DS->TSD_G[i].length);
read_alloc.c:    		DS->TSD_G[i].TS = (realtype **)malloc((DS->TSD_G[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_G[i].length; j++)
read_alloc.c:      			DS->TSD_G[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_G[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_G[i].TS[j][0], &DS->TSD_G[i].TS[j][1]);
read_alloc.c:		DS->TSD_G[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumP; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Pressure[i].name, &DS->TSD_Pressure[i].index, &DS->TSD_Pressure[i].length);
read_alloc.c:    		DS->TSD_Pressure[i].TS = (realtype **)malloc((DS->TSD_Pressure[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Pressure[i].length; j++)
read_alloc.c:      			DS->TSD_Pressure[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Pressure[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Pressure[i].TS[j][0], &DS->TSD_Pressure[i].TS[j][1]);
read_alloc.c:		DS->TSD_Pressure[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumLC; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d %lf", DS->TSD_LAI[i].name, &DS->TSD_LAI[i].index, &DS->TSD_LAI[i].length, &DS->ISFactor[i]);
read_alloc.c:    		DS->TSD_LAI[i].TS = (realtype **)malloc((DS->TSD_LAI[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_LAI[i].length; j++)
read_alloc.c:      			DS->TSD_LAI[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_LAI[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_LAI[i].TS[j][0], &DS->TSD_LAI[i].TS[j][1]);
read_alloc.c://		DS->ISFactor[i]=50*DS->ISFactor[i];
read_alloc.c:		DS->TSD_LAI[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumLC; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_RL[i].name, &DS->TSD_RL[i].index, &DS->TSD_RL[i].length);
read_alloc.c:    		DS->TSD_RL[i].TS = (realtype **)malloc((DS->TSD_RL[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_RL[i].length; j++)
read_alloc.c:      			DS->TSD_RL[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_RL[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_RL[i].TS[j][0], &DS->TSD_RL[i].TS[j][1]);
read_alloc.c:		DS->TSD_RL[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumMeltF; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_MeltF[i].name, &DS->TSD_MeltF[i].index, &DS->TSD_MeltF[i].length);
read_alloc.c:    		DS->TSD_MeltF[i].TS = (realtype **)malloc((DS->TSD_MeltF[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_MeltF[i].length; j++)
read_alloc.c:      			DS->TSD_MeltF[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_MeltF[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_MeltF[i].TS[j][0], &DS->TSD_MeltF[i].TS[j][1]);
read_alloc.c:		DS->TSD_MeltF[i].iCounter=0;
read_alloc.c:  	for(i=0; i<DS->NumSource; i++)
read_alloc.c:    		fscanf(forc_file, "%s %d %d", DS->TSD_Source[i].name, &DS->TSD_Source[i].index, &DS->TSD_Source[i].length);
read_alloc.c:    		DS->TSD_Source[i].TS = (realtype **)malloc((DS->TSD_Source[i].length)*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Source[i].length; j++)
read_alloc.c:      			DS->TSD_Source[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:    		for(j=0; j<DS->TSD_Source[i].length; j++)
read_alloc.c:      			fscanf(forc_file, "%lf %lf", &DS->TSD_Source[i].TS[j][0], &DS->TSD_Source[i].TS[j][1]);
read_alloc.c:		DS->TSD_Source[i].iCounter=0;
read_alloc.c:  	fscanf(ibc_file, "%d %d", &DS->Num1BC, &DS->Num2BC);
read_alloc.c:  	if(DS->Num1BC+DS->Num2BC > 0)
read_alloc.c:    		DS->TSD_EleBC = (TSD *)malloc((DS->Num1BC+DS->Num2BC)*sizeof(TSD));
read_alloc.c:  	if(DS->Num1BC>0)
read_alloc.c:    		for(i=0; i<DS->Num1BC; i++)
read_alloc.c:      			fscanf(ibc_file, "%s %d %d", DS->TSD_EleBC[i].name, &DS->TSD_EleBC[i].index,&DS->TSD_EleBC[i].length);
read_alloc.c:      			DS->TSD_EleBC[i].TS = (realtype **)malloc((DS->TSD_EleBC[i].length)*sizeof(realtype));
read_alloc.c:      			for(j=0; j<DS->TSD_EleBC[i].length; j++)
read_alloc.c:        			DS->TSD_EleBC[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:      			for(j=0; j<DS->TSD_EleBC[i].length; j++)
read_alloc.c:        			fscanf(forc_file, "%lf %lf", &DS->TSD_EleBC[i].TS[j][0],&DS->TSD_EleBC[i].TS[j][1]);
read_alloc.c:  	if(DS->Num2BC>0)
read_alloc.c:    		for(i=DS->Num1BC; i<DS->Num1BC+DS->Num2BC; i++)
read_alloc.c:      			fscanf(ibc_file, "%s %d %d", DS->TSD_EleBC[i].name, &DS->TSD_EleBC[i].index,&DS->TSD_EleBC[i].length);
read_alloc.c:      			DS->TSD_EleBC[i].TS = (realtype **)malloc((DS->TSD_EleBC[i].length)*sizeof(realtype));
read_alloc.c:      			for(j=0; j<DS->TSD_EleBC[i].length; j++)
read_alloc.c:        			DS->TSD_EleBC[i].TS[j] = (realtype *)malloc(2*sizeof(realtype));
read_alloc.c:      			for(j=0; j<DS->TSD_EleBC[i].length; j++)
read_alloc.c:        			fscanf(forc_file, "%lf %lf", &DS->TSD_EleBC[i].TS[j][0],&DS->TSD_EleBC[i].TS[j][1]);
read_alloc.c:  	fscanf(para_file, "%d %d", &DS->SurfMode, &DS->RivMode);
read_alloc.c:	fscanf(global_calib,"%lf %lf %lf",&DS->pcCal.Et0,&DS->pcCal.Et1,&DS->pcCal.Et2);
read_alloc.c:                        for(i=0; i<DS->NumEle; i++)
read_alloc.c:                                fscanf(init_file, "%lf %lf %lf %lf %lf %lf",&(DS->Ele_IC[i].interception),&(DS->Ele_IC[i].snow),&tempvalue1,&tempvalue2,&tempvalue3,&tempvalue4);
read_alloc.c:                                //DS->EleSnowGrnd[i]=0;//0*(1-DS->Ele[i].VegFrac)* DS->EleSnow[i];
read_alloc.c:                                //DS->EleSnowCanopy[i]=0;//0*DS->Ele[i].VegFrac* DS->EleSnow[i];
read_alloc.c:                                NV_Ith_S(CV_Y, i + DS->NumEle)=tempvalue2;
read_alloc.c:                                NV_Ith_S(CV_Y, i + 2*DS->NumEle)=tempvalue3;
read_alloc.c:                                NV_Ith_S(CV_Y, i + 3*DS->NumEle)=tempvalue4;
read_alloc.c:                        for(i=0; i<DS->NumRiv; i++)
read_alloc.c:                                NV_Ith_S(CV_Y, i + DS->totele) = tempvalue1;
read_alloc.c:                              	NV_Ith_S(CV_Y, i + DS->totele+DS->NumRiv) = tempvalue2; //(DS->Ele[i+DS->NumEle].zmax - DS->Ele[i+DS->NumEle].zmin);
